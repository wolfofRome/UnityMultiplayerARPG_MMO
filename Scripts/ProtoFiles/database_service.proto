syntax = "proto3";

service DatabaseService {
    rpc ValidateUserLogin (ValidateUserLoginReq) returns (ValidateUserLoginResp);
    rpc ValidateAccessToken (ValidateAccessTokenReq) returns (ValidateAccessTokenResp);
    rpc GetUserLevel (GetUserLevelReq) returns (GetUserLevelResp);
    rpc GetGold (GetGoldReq) returns (GoldResp);
    rpc ChangeGold (ChangeGoldReq) returns (GoldResp);
    rpc GetCash (GetCashReq) returns (CashResp);
    rpc ChangeCash (ChangeCashReq) returns (CashResp);
    rpc UpdateAccessToken (UpdateAccessTokenReq) returns (VoidResp);
    rpc CreateUserLogin (CreateUserLoginReq) returns (VoidResp);
    rpc FindUsername (FindUsernameReq) returns (FindUsernameResp);
    // Character
    rpc CreateCharacter (CreateCharacterReq) returns (CharacterResp);
    rpc ReadCharacter (ReadCharacterReq) returns (CharacterResp);
    rpc ReadCharacters (ReadCharactersReq) returns (CharactersResp);
    rpc UpdateCharacter (UpdateCharacterReq) returns (CharacterResp);
    rpc DeleteCharacter (DeleteCharacterReq) returns (VoidResp);
    rpc FindCharacterName (FindCharacterNameReq) returns (FindCharacterNameResp);
    rpc FindCharacters (FindCharactersReq) returns (FindCharactersResp);
    // Friend
    rpc CreateFriend (CreateFriendReq) returns (ReadFriendsResp);
    rpc DeleteFriend (DeleteFriendReq) returns (ReadFriendsResp);
    rpc ReadFriends (ReadFriendsReq) returns (ReadFriendsResp);
    // Building
    rpc CreateBuilding (CreateBuildingReq) returns (BuildingResp);
    rpc UpdateBuilding (UpdateBuildingReq) returns (BuildingResp);
    rpc DeleteBuilding (DeleteBuildingReq) returns (VoidResp);
    rpc ReadBuildings (ReadBuildingsReq) returns (BuildingsResp);
    // Party
    rpc CreateParty (CreatePartyReq) returns (PartyResp);
    rpc UpdateParty (UpdatePartyReq) returns (PartyResp);
    rpc UpdatePartyLeader (UpdatePartyLeaderReq) returns (PartyResp);
    rpc UpdateCharacterParty (UpdateCharacterPartyReq) returns (PartyResp);
    rpc ClearCharacterParty (ClearCharacterPartyReq) returns (VoidResp);
    rpc DeleteParty (DeletePartyReq) returns (VoidResp);
    rpc ReadParty (ReadPartyReq) returns (PartyResp);
    // Guild
    rpc CreateGuild (CreateGuildReq) returns (GuildResp);
    rpc IncreaseGuildExp (IncreaseGuildExpReq) returns (GuildResp);
    rpc AddGuildSkill (AddGuildSkillReq) returns (GuildResp);
    rpc UpdateGuildLeader (UpdateGuildLeaderReq) returns (GuildResp);
    rpc UpdateGuildMessage (UpdateGuildMessageReq) returns (GuildResp);
    rpc UpdateGuildRole (UpdateGuildRoleReq) returns (GuildResp);
    rpc UpdateGuildMemberRole (UpdateGuildMemberRoleReq) returns (GuildResp);
    rpc UpdateCharacterGuild (UpdateCharacterGuildReq) returns (GuildResp);
    rpc ClearCharacterGuild (ClearCharacterGuildReq) returns (VoidResp);
    rpc DeleteGuild (DeleteGuildReq) returns (VoidResp);
    rpc FindGuildName (FindGuildNameReq) returns (FindGuildNameResp);
    rpc ReadGuild (ReadGuildReq) returns (GuildResp);
    rpc GetGuildGold (GetGuildGoldReq) returns (GuildGoldResp);
    rpc ChangeGuildGold (ChangeGuildGoldReq) returns (GuildGoldResp);
    // Storage
    rpc ReadStorageItems (ReadStorageItemsReq) returns (ReadStorageItemsResp);
    rpc MoveItemToStorage (MoveItemToStorageReq) returns (MoveItemToStorageResp);
    rpc MoveItemFromStorage (MoveItemFromStorageReq) returns (MoveItemFromStorageResp);
    rpc SwapOrMergeStorageItem (SwapOrMergeStorageItemReq) returns (SwapOrMergeStorageItemResp);
    rpc IncreaseStorageItems (IncreaseStorageItemsReq) returns (IncreaseStorageItemsResp);
    rpc DecreaseStorageItems (DecreaseStorageItemsReq) returns (DecreaseStorageItemsResp);
    // Mail
    rpc MailList (MailListReq) returns (MailListResp);
    rpc ReadMail (ReadMailReq) returns (ReadMailResp);
    rpc ClaimMailItems (ClaimMailItemsReq) returns (ClaimMailItemsResp);
    rpc DeleteMail (DeleteMailReq) returns (DeleteMailResp);
    rpc SendMail (SendMailReq) returns (SendMailResp);
    // Other
    rpc Custom (CustomReq) returns (CustomResp);
}
enum EStorageType
{
    STORAGE_TYPE_NONE = 0;
    STORAGE_TYPE_PLAYER = 1;
    STORAGE_TYPE_GUILD = 2;
    STORAGE_TYPE_BUILDING = 3;
}
enum EStorageError
{
    STORAGE_ERROR_NONE = 0;
    STORAGE_ERROR_INVALID_STORAGE = 1;
    STORAGE_ERROR_INVALID_CHARACTER = 2;
    STORAGE_ERROR_INVALID_STORAGE_INDEX = 3;
    STORAGE_ERROR_INVALID_INVENTORY_INDEX = 4;
    STORAGE_ERROR_STORAGE_WILL_OVERWHELMING = 5;
    STORAGE_ERROR_INVENTORY_WILL_OVERWHELMING = 6;
    STORAGE_ERROR_DECREASE_ITEM_NOT_ENOUGH = 7;
}
enum EReadMailError
{
    READ_MAIL_ERROR_NONE = 0;
    READ_MAIL_ERROR_NOT_AVAILABLE = 1;
    READ_MAIL_ERROR_NOT_ALLOWED = 2;
}
enum EClaimMailItemsError
{
    CLIAM_MAIL_ITEMS_ERROR_NONE = 0;
    CLIAM_MAIL_ITEMS_ERROR_NOT_AVAILABLE = 1;
    CLIAM_MAIL_ITEMS_ERROR_NOT_ALLOWED = 2;
    CLIAM_MAIL_ITEMS_ERROR_ALREADY_CLAIMED = 3;
}
enum EDeleteMailError
{
    DELETE_MAIL_ERROR_NONE = 0;
    DELETE_MAIL_ERROR_NOT_AVAILABLE = 1;
    DELETE_MAIL_ERROR_NOT_ALLOWED = 2;
}
enum ESendMailError
{
    SEND_MAIL_ERROR_NONE = 0;
    SEND_MAIL_ERROR_NOT_AVAILABLE = 1;
    SEND_MAIL_ERROR_NOT_ALLOWED = 2;
    SEND_MAIL_ERROR_NO_RECEIVER = 3;
}
// Map
message ItemIndexAmountMap {
    int32 index = 1;
    int32 amount = 2;
}
// Generic response
message VoidResp {
}
message GoldResp {
    int32 gold = 1;
}
message CashResp {
    int32 cash = 1;
}
message GuildGoldResp {
    int32 guild_gold = 1;
}
// Validate user login
message ValidateUserLoginReq {
    string username = 1;
    string password = 2;
}
message ValidateUserLoginResp {
    string user_id = 1;
}
// Validate access token
message ValidateAccessTokenReq {
    string user_id = 1;
    string access_token = 2;
}
message ValidateAccessTokenResp {
    bool is_pass = 1;
}
// Get user level
message GetUserLevelReq {
    string user_id = 1;
}
message GetUserLevelResp {
    uint32 user_level = 1;
}
// Get gold
message GetGoldReq {
    string user_id = 1;
}
// Increase gold
message ChangeGoldReq {
    string user_id = 1;
    int32 change_amount = 2;
}
// Get cash
message GetCashReq {
    string user_id = 1;
}
// Increase cash
message ChangeCashReq {
    string user_id = 1;
    int32 change_amount = 2;
}
// Update access token
message UpdateAccessTokenReq {
    string user_id = 1;
    string access_token = 2;
}
// Create user login
message CreateUserLoginReq {
    string username = 1;
    string password = 2;
}
// Find username
message FindUsernameReq {
    string username = 1;
}
message FindUsernameResp {
    int64 found_amount = 1;
}
// Create character
message CreateCharacterReq {
    string user_id = 1;
    bytes character_data = 2;
}
// Read character
message ReadCharacterReq {
    string user_id = 1;
    string character_id = 2;
}
message CharacterResp {
    bytes character_data = 1;
}
// Read characters
message ReadCharactersReq {
    string user_id = 1;
}
message CharactersResp {
    repeated bytes list = 1;
}
// Update character
message UpdateCharacterReq {
    bytes character_data = 1;
}
// Delete character
message DeleteCharacterReq {
    string user_id = 1;
    string character_id = 2;
}
// Find character name
message FindCharacterNameReq {
    string character_name = 1;
}
message FindCharacterNameResp {
    int64 found_amount = 1;
}
// Find characters
message FindCharactersReq {
    string character_name = 1;
}
message FindCharactersResp {
    repeated bytes list = 1;
}
// Create friend
message CreateFriendReq {
    string character_1_id = 1;
    string character_2_id = 2;
}
// Delete friend
message DeleteFriendReq {
    string character_1_id = 1;
    string character_2_id = 2;
}
// Read friends
message ReadFriendsReq {
    string character_id = 1;
}
message ReadFriendsResp {
    repeated bytes list = 1;
}
// Create building
message CreateBuildingReq {
    string map_name = 1;
    bytes building_data = 2;
}
// Update building
message UpdateBuildingReq {
    string map_name = 1;
    bytes building_data = 2;
}
// Delete building
message DeleteBuildingReq {
    string map_name = 1;
    string building_id = 2;
}
// Read building
message BuildingResp {
    bytes building_data = 1;
}
// Read buildings
message ReadBuildingsReq {
    string map_name = 1;
}
message BuildingsResp {
    repeated bytes list = 1;
}
// Create party
message CreatePartyReq {
    bool share_exp = 1;
    bool share_item = 2;
    string leader_character_id = 3;
}
// Update party
message UpdatePartyReq {
    int32 party_id = 1;
    bool share_exp = 2;
    bool share_item = 3;
}
// Update party leader
message UpdatePartyLeaderReq {
    int32 party_id = 1;
    string leader_character_id = 2;
}
// Update character party
message UpdateCharacterPartyReq {
    bytes social_character_data = 1;
    int32 party_id = 2;
}
// Clear character party
message ClearCharacterPartyReq {
    string character_id = 1;
}
// Delete party
message DeletePartyReq {
    int32 party_id = 1;
}
// Read party
message ReadPartyReq {
    int32 party_id = 1;
}
message PartyResp {
    bytes party_data = 1;
}
// Create guild
message CreateGuildReq {
    string guild_name = 1;
    string leader_character_id = 2;
}
// Guild Level Up
message IncreaseGuildExpReq {
    int32 guild_id = 1;
    int32 exp = 2;
}
// Guild Skill Level Up
message AddGuildSkillReq {
    int32 guild_id = 1;
    int32 skill_id = 2;
}
// Update guild leader
message UpdateGuildLeaderReq {
    int32 guild_id = 1;
    string leader_character_id = 2;
}
// Update guild message
message UpdateGuildMessageReq {
    int32 guild_id = 1;
    string guild_message = 2;
}
// Update guild role
message UpdateGuildRoleReq {
    int32 guild_id = 1;
    uint32 guild_role = 2;
    string role_name = 3;
    bool can_invite = 4;
    bool can_kick = 5;
    uint32 share_exp_percentage = 6;
}
// Update guild member role
message UpdateGuildMemberRoleReq {
    int32 guild_id = 1;
    string member_character_id = 2;
    uint32 guild_role = 3;
}
// Update character guild
message UpdateCharacterGuildReq {
    bytes social_character_data = 1;
    int32 guild_id = 2;
    uint32 guild_role = 3;
}
// Clear character guild
message ClearCharacterGuildReq {
    string character_id = 1;
}
// Delete guild
message DeleteGuildReq {
    int32 guild_id = 1;
}
// Find guild name
message FindGuildNameReq {
    string guild_name = 1;
}
message FindGuildNameResp {
    int64 found_amount = 1;
}
// Read guild
message ReadGuildReq {
    int32 guild_id = 1;
}
message GuildResp {
    bytes guild_data = 1;
}
// Get guild gold
message GetGuildGoldReq {
    int32 guild_id = 1;
}
// Increase guild gold
message ChangeGuildGoldReq {
    int32 guild_id = 1;
    int32 change_amount = 2;
}
// Decrease guild gold
message DecreaseGuildGoldReq {
    int32 guild_id = 1;
    int32 amount = 2;
}
// Read storage items
message ReadStorageItemsReq {
    EStorageType storage_type = 1;
    string storage_owner_id = 2;
}
message ReadStorageItemsResp {
    repeated bytes storage_character_items = 1;
}
// Move item to storage
message MoveItemToStorageReq {
    EStorageType storage_type = 1;
    string storage_owner_id = 2;
    string character_id = 3;
    string map_name = 4;
    int32 inventory_item_index = 5;
    int32 inventory_item_amount = 6;
    int32 storage_item_index = 7;
}
message MoveItemToStorageResp {
    EStorageError error = 1;
    repeated bytes inventory_item_items = 2;
    repeated bytes storage_character_items = 3;
}
// Move item from storage
message MoveItemFromStorageReq {
    EStorageType storage_type = 1;
    string storage_owner_id = 2;
    string character_id = 3;
    string map_name = 4;
    int32 storage_item_index = 5;
    int32 storage_item_amount = 6;
    int32 inventory_item_index = 7;
}
message MoveItemFromStorageResp {
    EStorageError error = 1;
    repeated bytes inventory_item_items = 2;
    repeated bytes storage_character_items = 3;
}
// Swap or merge storage item
message SwapOrMergeStorageItemReq {
    EStorageType storage_type = 1;
    string storage_owner_id = 2;
    string character_id = 3;
    string map_name = 4;
    int32 from_index = 5;
    int32 to_index = 6;
}
message SwapOrMergeStorageItemResp {
    EStorageError error = 1;
    repeated bytes storage_character_items = 2;
}
// Increase storage items
message IncreaseStorageItemsReq {
    EStorageType storage_type = 1;
    string storage_owner_id = 2;
    string map_name = 3;
    bytes item = 4;
}
message IncreaseStorageItemsResp {
    EStorageError error = 1;
    repeated bytes storage_character_items = 2;
}
// Decrease storage items
message DecreaseStorageItemsReq {
    EStorageType storage_type = 1;
    string storage_owner_id = 2;
    string map_name = 3;
    int32 data_id = 4;
    int32 amount = 5;
}
message DecreaseStorageItemsResp {
    EStorageError error = 1;
    repeated bytes storage_character_items = 2;
    repeated ItemIndexAmountMap decreased_items = 3;
}
// Mail
message MailListReq {
    string user_id = 1;
    bool only_new_mails = 2;
}
message MailListResp {
    repeated bytes list = 1;
}
message ReadMailReq {
    string mail_id = 1;
    string user_id = 2;
}
message ReadMailResp {
    EReadMailError error = 1;
    bytes mail = 2;
}
message ClaimMailItemsReq {
    string mail_id = 1;
    string user_id = 2;
}
message ClaimMailItemsResp {
    EClaimMailItemsError error = 1;
    bytes mail = 2;
}
message DeleteMailReq {
    string mail_id = 1;
    string user_id = 2;
}
message DeleteMailResp {
    EDeleteMailError error = 1;
}
message SendMailReq {
    string user_id = 1;
    string sender_name = 2;
    string title = 3;
    string content = 4;
    int32 gold = 5;
}
message SendMailResp {
    ESendMailError error = 1;
}
// Custom
message CustomReq {
    int32 type = 1;
    bytes data = 2;
}
message CustomResp {
    int32 type = 1;
    bytes data = 2;
}